#include <iostream>
 
using namespace std;
 
int memo[100][51][51][2];
int P[100];
 
int process(int i,int p,int np,bool imp)
{
    if(i==-1)return 0;
    if(memo[i][p][np][imp] != -1)return memo[i][p][np][imp];
    if(p==0 && np==0)
        return memo[i][0][0][imp] = (P[i]%2 ^ imp) + process(i-1,0,0,P[i]%2);
    if(p==0)
        return memo[i][0][np][imp] = (P[i] == 0 ? (!imp) + process(i-1,0,np-1,true) : (imp ^ P[i]%2) + process(i-1,0,np,P[i]%2));
    if(np==0)
        return memo[i][p][0][imp] = (P[i] == 0 ? imp + process(i-1,p-1,0,false) : (imp ^ P[i]%2) + process(i-1,p,0,P[i]%2));
    return memo[i][p][np][imp] = (P[i] != 0 ? (imp ^ P[i]%2) + process(i-1,p,np,P[i]%2)
                                  : min(process(i-1,p-1,np,false) + imp, process(i-1,p,np-1,true) + !imp));
}
 
int main()
{
    ios_base::sync_with_stdio(false);
    int N;
    cin >> N;
    int p=N/2,np=(N+1)/2;
    for(int n=0;n<N;n++)
    {
        cin >> P[n];
        if(P[n] != 0)
        {
            p -= (P[n]%2 == 0);
            np -= (P[n]%2 == 1);
        }
    }
    for(int n=0;n<100;n++)
        for(int m=0;m<=50;m++)
            for(int k=0;k<=50;k++)
                memo[n][m][k][0] = memo[n][m][k][1] = -1;
 
    cout << min(process(N-1,p,np,false),process(N-1,p,np,true));
 
    return 0;
}
